
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from google.oauth2.credentials import Credentials
from allauth.socialaccount.models import SocialToken, SocialApp
from django.contrib.auth.models import User

from .models import Reservation, Schedule, TimeSlot

# Notes:
# Client object is just a capsule for the Credentials, there is no cost to building multiple client objects

# Template strings for the IDs for each of our calendar elements
# The ID+DomainName method for generating IDs for our calendar elements should be unique enough so it doesn't clash with any other IDs
# AutoIncrement fields in SQL never return previous numbers, so we should also be safe in that regard too.

CALENDAR_ID_SUFFIX = "ratatoskr.techhigh.us"
CALENDAR_SCHEDULE_ID = "{schedule_id}#" + CALENDAR_ID_SUFFIX                        # Ex: "9824#ratatoskr.techhigh.us"
CALENDAR_TIMESLOT_EVENT_ID = "{timeslot_id}@{schedule_id}#" + CALENDAR_ID_SUFFIX    # Ex: "74343@9824#ratatoskr.techhigh.us"

def build_schedule_id(schedule: Schedule) -> str:
    return CALENDAR_SCHEDULE_ID % {
        "schedule_id": schedule.id
    }

def build_timeslot_event_id(timeslot: TimeSlot) -> str:
    return CALENDAR_TIMESLOT_EVENT_ID % {
        "schedule_id": timeslot.id,
        "timeslot_id": timeslot.schedule.id
    }


# Builds the calendar api using the User's api tokens
def build_calendar_client(user: User):
    token = SocialToken.objects.get(account__user=user, account__provider='google')
    google_app = SocialApp.objects.get(provider="google")
    credentials = Credentials(
        token=token.token,
        refresh_token=token.token_secret,
        token_uri='https://oauth2.googleapis.com/token',
        client_id=google_app.client_id, 
        client_secret=google_app.secret) 
    return build('calendar', 'v3', credentials=credentials)

# Gets the calendar associated with the schedule
def get_calendar(schedule: Schedule) -> dict:
    client = build_calendar_client(schedule.owner)
    calendar_id = build_schedule_id(schedule)
    # Get the calendar if it does exist. If it doesn't, create a new calendar.
    try:
        calendar = client.calendars().get(calendarId=calendar_id)
    except HttpError:
        calendar_body = {
            'summary': f'Ratatoskr: {schedule.name}',
            'description': 'Calendar generated by Ratatoskr. Please do not delete.',
            'timeZone': 'America/New_York',
            'conferenceProperties': ["hangoutsMeet"],
            'id': calendar_id
        }
        calendar = client.calendars().insert(body=calendar_body)
    return calendar

